module.exports = (socket, io, rooms) => {
  socket.on("tod-join", ({ roomCode, player }) => {
    // Ki·ªÉm tra n·∫øu room t·ªìn t·∫°i
    if (!rooms[roomCode]) {
      console.log(`‚ùå Room ${roomCode} kh√¥ng t·ªìn t·∫°i khi join`);
      return;
    }

    console.log(`üé≤ ToD: ${player} ƒë√£ tham gia ${roomCode}`);
    socket.join(roomCode);

    // Tr·∫£ l·∫°i host cho FE ƒë·ªÉ bi·∫øt ai ƒë∆∞·ª£c quy·ªÅn b·∫Øt ƒë·∫ßu
    io.to(socket.id).emit("tod-joined", {
      host: rooms[roomCode][0]?.name || null,
      players: rooms[roomCode].map(p => p.name)
    });
  });

  socket.on("tod-start", ({ roomCode }) => {
    const players = rooms[roomCode];
    if (!players || players.length < 2) {
      console.log(`‚ùå Kh√¥ng ƒë·ªß ng∆∞·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i trong ph√≤ng ${roomCode}`);
      io.to(socket.id).emit("tod-error", "C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi ƒë·ªÉ ch∆°i!");
      return;
    }

    const randomIndex = Math.floor(Math.random() * players.length);
    const chosenPlayer = players[randomIndex].name;

    console.log(`üéØ Ng∆∞·ªùi b·ªã ch·ªçn: ${chosenPlayer} trong ph√≤ng ${roomCode}`);
    io.to(roomCode).emit("tod-chosen", chosenPlayer);
  });

  socket.on("tod-choice", ({ roomCode, player, choice }) => {
    console.log(`üó®Ô∏è ${player} ch·ªçn ${choice} ·ªü ${roomCode}`);
    // Chuy·ªÉn c√¢u h·ªèi gi·∫£ l·∫≠p - th·ª±c t·∫ø b·∫°n c√≥ th·ªÉ random t·ª´ b·ªô c√¢u h·ªèi ri√™ng
    const question = choice === "truth"
      ? "B·∫°n ƒë√£ t·ª´ng n√≥i d·ªëi ai ch∆∞a?"
      : "H√£y l√†m 10 c√°i h√≠t ƒë·∫•t!";
    io.to(roomCode).emit("tod-question", { player, choice, question });
  });

  socket.on("tod-vote", ({ roomCode, player, vote }) => {
    console.log(`‚úÖ ${player} vote ${vote} trong ${roomCode}`);
    // C√≥ th·ªÉ t√≠ch h·ª£p l∆∞u vote v√† check t·ªâ l·ªá
    // ƒê∆°n gi·∫£n nh·∫•t, ch·ªâ broadcast ƒë·ªÉ FE test:
    io.to(roomCode).emit("tod-voted", { player, vote });
  });
};
